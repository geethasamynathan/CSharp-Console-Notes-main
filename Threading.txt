Threading:
-----------------
using System;
using System.Threading;

namespace MultithreadingApplication
{
    class MainThreadProgram
    {
        static void Main(string[] args)
        {
            Thread th = Thread.CurrentThread;
            th.Name = "MainThread";
            Console.WriteLine("This is {0}", th.Name);
            Console.ReadKey();
        }
    }
}


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Creating Threads:
----------------
Threads are created by extending the Thread class. The extended Thread class then calls the Start() method to begin the child thread execution.

The following program demonstrates the concept:

using System;
using System.Threading;

namespace MultithreadingApplication
{
    class ThreadCreationProgram
    {
        public static void CallToChildThread()
        {
            Console.WriteLine("Child thread starts");
        }
        
        static void Main(string[] args)
        {
            ThreadStart childref = new ThreadStart(CallToChildThread);
            Console.WriteLine("In Main: Creating the Child thread");
            Thread childThread = new Thread(childref);
            childThread.Start();
            Console.ReadKey();
        }
    }
}
===============================================================================
 class Program
    {
        static  void Main(string[] args)
        {
            Thread thread1 = new Thread(SampleThread1);
            Thread thread2 = new Thread(SampleThread2);
            Thread thread3 = new Thread(SampleThread3);
            Thread.CurrentThread.Name = "Main";
            Console.WriteLine( "Main Thread " );
            Console.WriteLine(" current Thread Name"+ Thread.CurrentThread.Name);
            thread1.Start();
            thread2.Start();
            thread3.Start();
           
            Console.ReadLine();
        }
      public  static void SampleThread1()
        {
            Thread.CurrentThread.Name = "SampelMethod";
            Console.WriteLine($" current Thread Name {Thread.CurrentThread.Name}");
            for (int i = 0; i < 20; i++)
            {
                Console.WriteLine($" sample Thread {i}");
                if (i == 10)
                    Thread.Sleep(4000);
            }
        }
        public static void SampleThread2()
        {
            Thread.CurrentThread.Name = "Second Method";
            Console.WriteLine($" current Thread Name {Thread.CurrentThread.Name}");
            for (int i = 0; i < 20; i++)
            {
                Console.WriteLine($"Second {i}");
            }
        }
            public static void SampleThread3()
            {
                Thread.CurrentThread.Name = "Third Method";
                Console.WriteLine($" current Thread Name {Thread.CurrentThread.Name}");
                for (int i = 0; i < 20; i++)
                {
                    if (i == 5)
                        Thread.Sleep(1000);
                    Console.WriteLine($"Third  {i}");
                }
            
        }
====================================================================================

Managing Threads
The Thread class provides various methods for managing threads.

The following example demonstrates the use of the sleep() method for making a thread pause for a specific period of time.

using System;
using System.Threading;

namespace MultithreadingApplication
{
    class ThreadCreationProgram
    {
        public static void CallToChildThread()
        {
            Console.WriteLine("Child thread starts");
            // the thread is paused for 5000 milliseconds
            int sleepfor = 5000; 
            Console.WriteLine("Child Thread Paused for {0} seconds", 
                              sleepfor / 1000);
            Thread.Sleep(sleepfor);
            Console.WriteLine("Child thread resumes");
        }
        
        static void Main(string[] args)
        {
            ThreadStart childref = new ThreadStart(CallToChildThread);
            Console.WriteLine("In Main: Creating the Child thread");
            Thread childThread = new Thread(childref);
            childThread.Start();
            Console.ReadKey();
        }
    }
}


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Destroying Threads
The Abort() method is used for destroying threads.

The runtime aborts the thread by throwing a ThreadAbortException. This exception cannot be caught, the control is sent to the finally block, if any.

The following program illustrates this:

using System;
using System.Threading;

namespace MultithreadingApplication
{
    class ThreadCreationProgram
    {
        public static void CallToChildThread()
        {
            try
            {

                Console.WriteLine("Child thread starts");
                // do some work, like counting to 10
                for (int counter = 0; counter <= 10; counter++)
                {
                    Thread.Sleep(500);
                    Console.WriteLine(counter);
                }
                Console.WriteLine("Child Thread Completed");

            }
            catch (ThreadAbortException e)
            {
                Console.WriteLine("Thread Abort Exception");
            }
            finally
            {
                Console.WriteLine("Couldn't catch the Thread Exception");
            }

        }
        
        static void Main(string[] args)
        {
            ThreadStart childref = new ThreadStart(CallToChildThread);
            Console.WriteLine("In Main: Creating the Child thread");
            Thread childThread = new Thread(childref);
            childThread.Start();
            //stop the main thread for some time
            Thread.Sleep(2000);
            //now abort the child
            Console.WriteLine("In Main: Aborting the Child thread");
            childThread.Abort();
            Console.ReadKey();
        }
    }
}